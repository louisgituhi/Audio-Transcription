/// <reference types="node" />
import { RealtimeServiceParams, RealtimeTranscript, PartialTranscript, FinalTranscript, SessionBeginsEventData } from "../..";
export declare class RealtimeService {
    private realtimeUrl;
    private sampleRate;
    private wordBoost?;
    private apiKey?;
    private token?;
    private socket?;
    private listeners;
    private sessionTerminatedResolve?;
    constructor(params: RealtimeServiceParams);
    private connectionUrl;
    on(event: "open", listener: (event: SessionBeginsEventData) => void): void;
    on(event: "transcript", listener: (transcript: RealtimeTranscript) => void): void;
    on(event: "transcript.partial", listener: (transcript: PartialTranscript) => void): void;
    on(event: "transcript.final", listener: (transcript: FinalTranscript) => void): void;
    on(event: "error", listener: (error: Error) => void): void;
    on(event: "close", listener: (code: number, reason: string) => void): void;
    connect(): Promise<SessionBeginsEventData>;
    sendAudio(audio: ArrayBuffer): void;
    stream(): NodeJS.WritableStream;
    close(waitForSessionTermination?: boolean): Promise<void>;
}
